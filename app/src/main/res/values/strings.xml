<resources>
    <string name="app_name">Тест CRC</string>
    <string name="theory">Теория</string>
    <string name="startTest">Пройти тест</string>


    <string name="Title1">Вычисление контрольной суммы</string>
    <string name="text1">Алгоритм вычисления контрольной суммы CRC (Cyclic Redundancy Code — циклический избыточный код) — способ цифровой идентификации некоторой последовательности данных, который заключается
        в вычислении контрольного значения её циклического избыточного кода. </string>

    <string name="text2">С точки зрения математики, контрольная сумма является разновидностью хеш-функции,
используемой для вычисления контрольного кода — небольшого количества бит внутри
большого блока данных, например, сетевого кадра или компьютерного файла,
применяемого для обнаружения ошибок при передаче или хранении информации.
Результат вычисления контрольной суммы добавляется в конец фреймав виде трейлера
непосредственно перед началом передачи или сохранения данных на каком-либо носителе
информации. Впоследствии он проверяется для подтверждения её целостности.
Популярность контрольной суммы обусловлена тем, что подобная проверка просто
реализуема в двоичном цифровом оборудовании (на MAC подуровне), легко
анализируется и хорошо подходит для обнаружения общих ошибок, вызванных наличием
шума в каналах передачи данных. </string>

    <string name="text3">Алгоритм CRC базируется на свойствах деления с остатком двоичных многочленов, то
есть хеш-функция является, по сути, остатком от деления многочлена, соответствующего
входным данным, на некий фиксированный порождающий многочлен (примитивный
полином). На практике же вместо полиномов применяются двоичные числа.
На рисунке 3 демонстрируется алгоритм вычисления CRCотправителем кадра.
</string>

    <string name="text4">
        Перед вычислением CRC к сообщению 0110000110 добавляются нулевые биты 0000.
Число добавляемых битов (4 бита) на единицу меньше длины делителя 10110 (5 битов).
Само вычисление CRC отличается от привычной нам операции деления тем, что вместо
вычитания применяется побитовая операция XOR (Исключающее ИЛИ), обозначаемое
как ⊕. Результирующий бит будет равен 1лишь в случае, если сравниваемые биты будут
различны:
    </string>

    <string name="text5">
        1 ⊕ 1 = 0 \n
        0 ⊕ 0 = 0 \n
        1 ⊕ 0 = 1 \n
        0 ⊕ 1 = 1 \n
    </string>

    <string name="text6">
        Отправитель затем формирует кадр, к которому в качестве трейлера «прицепляет»
вычисленный CRC (рис. 4).
    </string>

    <string name="text7">
        В коде CRC контрольные биты располагаются отдельно от информационных.
Как же получатель кадра удостоверяется, что передача по сети полученного сообщения
прошла без ошибок? Он пересчитывает контрольную сумму, используя тот же полином
(рис. 5).

    </string>

    <string name="text8">
        Если в полученном кадре отсутствуют ошибочные биты, то остаток должен быть нулевой!
Смоделируем ситуацию, когда один бит в сообщении был изменен в ходе передачи (он
выделен красным цветом).
    </string>

    <string name="text9">
        В данном случае (рис. 6) контрольная сумма отлична от нуля. Таким образом, для
выявления факта наличия ошибок передачи данных достаточно заново вычислить CRC.
CRC не позволяет выяснить в каком месте сообщения бит или биты были изменены, а,
следовательно, этот алгоритм не относится к корректирующим кодам.
    </string>
    <string name="message">Сообщение</string>
    <string name="div">Делитель (полином)</string>
    <string name="answer">Ответ</string>
    <string name="next">Далее</string>
    <string name="result">Ваш результат:</string>
    <string name="enterSurname">Введите фамилию</string>
    <string name="enterGroup">Введите группу</string>
    <string name="sent">Отправить</string>
    <string name="finishTest">Завершить тест</string>

</resources>
